parameters:
  displayName: 'Windows VS 2019'
  cudaEnabled: false
  
jobs:
- job: windows_build_cuda_${{ parameters.cudaEnabled }}
  displayName: ${{ parameters.displayName }}
  timeoutInMinutes: 240
  pool:
    vmImage: 'windows-2019'
  variables:
    vcpkgGitCommitId: ec6fe06e8da05a8157dc8581fa96b36b571c1bd5
  steps:
  - task: Cache@2
    displayName: 'Cache vcpkg'
    inputs:
      key: $(Build.SourcesDirectory)/.azure-pipelines/build-windows-vcpkg.txt | "$(vcpkgGitCommitId)" | "$(Agent.OS)"
      path: '$(Build.BinariesDirectory)/vcpkg'

  - task: run-vcpkg@0
    displayName: 'Run vcpkg'
    inputs:
      vcpkgArguments: '@$(Build.SourcesDirectory)/.azure-pipelines/build-windows-vcpkg.txt'
      vcpkgGitCommitId: $(vcpkgGitCommitId)
      vcpkgGitURL: https://github.com/microsoft/vcpkg

  - ${{ if eq(parameters.cudaEnabled, true) }}:
    - pwsh: |
        curl -O https://developer.download.nvidia.com/compute/cuda/11.2.1/network_installers/cuda_11.2.1_win10_network.exe
        Start-Process -FilePath "cuda_11.2.1_win10_network.exe" -ArgumentList "-s nvcc_11.2 visual_studio_integration_11.2" -Wait -NoNewWindow
      displayName: Install CUDA

  - pwsh: |
      curl -L -o `
        $(Build.BinariesDirectory)/ninja.zip `
        https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip
      Expand-Archive -LiteralPath $(Build.BinariesDirectory)/ninja.zip -DestinationPath $(Build.BinariesDirectory)
    displayName: Prepare build

  - task: run-cmake@0
    displayName: 'Configure and build'
    inputs:
      cmakeListsOrSettingsJson: 'CMakeListsTxtAdvanced'
      cmakeListsTxtPath: '$(Build.SourcesDirectory)/CMakeLists.txt'
      cmakeBuildType: 'Release'
      cmakeGenerator: 'Ninja'
      cmakeAppendedArgs: -GNinja -DCMAKE_MAKE_PROGRAM=$(Build.BinariesDirectory)/ninja.exe -DCMAKE_BUILD_TYPE=Release -DTESTS_ENABLED=ON
      useVcpkgToolchainFile: true

  - pwsh: |
      $env:PATH = "$(Build.BinariesDirectory)/vcpkg/installed/x64-windows/release/bin/;$env:Path"
      ctest
      $tests_pass=$LastExitCode
      if ($tests_pass -ne 0) {
          echo "`n`n`nTests failed, rerunning with verbose output"
          ctest --rerun-failed --output-on-failure
      }
      exit $tests_pass
    workingDirectory: $(Build.ArtifactStagingDirectory)
    displayName: 'Run tests'
